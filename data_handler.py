# data_handler.py (Fixed version)
import uuid
from datetime import datetime
import pandas as pd
import streamlit as st
from helpers import calc_price_per_unit

# ==== K·∫æT N·ªêI GOOGLE SHEETS (streamlit-gsheets) ====
try:
    from streamlit_gsheets import GSheetsConnection
except ImportError as e:
    st.error(
        "Thi·∫øu g√≥i 'streamlit-gsheets'. H√£y th√™m v√†o requirements.txt (vd: streamlit-gsheets==0.0.9) r·ªìi deploy l·∫°i."
    )
    st.stop()

# Kh·ªüi t·∫°o connection
try:
    _conn = st.connection("gsheets", type=GSheetsConnection)
except Exception as e:
    st.error(f"L·ªói khi kh·ªüi t·∫°o connection: {e}")
    st.error("H√£y ki·ªÉm tra secrets.toml v√† ƒë·∫£m b·∫£o Google Drive API ƒë√£ ƒë∆∞·ª£c b·∫≠t.")
    st.stop()

# L·∫•y t√™n/URL spreadsheet t·ª´ secrets; fallback v·ªÅ "cnfund"
try:
    _SPREADSHEET = st.secrets["connections"]["gsheets"].get("spreadsheet", "cnfund")
except Exception:
    _SPREADSHEET = "cnfund"

# T√™n worksheet
_WS_INVESTORS = "investors"
_WS_TRANCHES = "tranches"
_WS_TRANSACTIONS = "transactions"

# Tham s·ªë chung khi ƒë·ªçc/ghi
_READ_KW = dict(spreadsheet=_SPREADSHEET, ttl=0)  # ttl=0 ƒë·ªÉ lu√¥n m·ªõi

def _ensure_columns(df: pd.DataFrame, columns):
    """ƒê·∫£m b·∫£o DataFrame c√≥ ƒë·ªß c·ªôt theo danh s√°ch 'columns'."""
    if df is None or df.empty:
        return pd.DataFrame(columns=columns)
    missing = [c for c in columns if c not in df.columns]
    for c in missing:
        df[c] = pd.Series(dtype="object")
    return df[columns].copy()

def _parse_dates(df: pd.DataFrame, cols):
    for c in cols:
        if c in df.columns:
            df[c] = pd.to_datetime(df[c], errors="coerce")
    return df

def _parse_numbers(df: pd.DataFrame, cols):
    for c in cols:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors="coerce")
    return df

def _read_ws(worksheet: str) -> pd.DataFrame:
    """ƒê·ªçc worksheet v·ªõi error handling t·ªët h∆°n"""
    try:
        df = _conn.read(worksheet=worksheet, **_READ_KW)
        if df is None or df.empty:
            return pd.DataFrame()
        return df.replace({None: pd.NA})
    except Exception as e:
        error_msg = str(e)
        if "SERVICE_DISABLED" in error_msg or "Google Drive API" in error_msg:
            st.error("üö® **Google Drive API ch∆∞a ƒë∆∞·ª£c b·∫≠t!**")
            st.error("Vui l√≤ng:")
            st.error("1. Truy c·∫≠p: https://console.developers.google.com/apis/api/drive.googleapis.com/overview?project=129071271267")
            st.error("2. Click 'Enable' ƒë·ªÉ b·∫≠t Google Drive API")
            st.error("3. T∆∞∆°ng t·ª± b·∫≠t Google Sheets API")
            st.error("4. ƒê·ª£i v√†i ph√∫t r·ªìi th·ª≠ l·∫°i")
        else:
            st.error(f"L·ªói khi ƒë·ªçc worksheet '{worksheet}': {e}")
        return pd.DataFrame()

def _write_ws(worksheet: str, df: pd.DataFrame):
    """Ghi worksheet v·ªõi error handling t·ªët h∆°n"""
    df_to_save = df.copy()
    # Chuy·ªÉn datetime v·ªÅ ISO ƒë·ªÉ l∆∞u l√™n Sheets ƒë·∫πp
    for col in df_to_save.columns:
        if pd.api.types.is_datetime64_any_dtype(df_to_save[col]):
            df_to_save[col] = df_to_save[col].dt.strftime("%Y-%m-%d %H:%M:%S")
    
    try:
        _conn.update(worksheet=worksheet, data=df_to_save, spreadsheet=_SPREADSHEET)
    except Exception as e:
        error_msg = str(e)
        if "SERVICE_DISABLED" in error_msg or "Google Drive API" in error_msg:
            st.error("üö® **Google Drive API ch∆∞a ƒë∆∞·ª£c b·∫≠t khi ghi d·ªØ li·ªáu!**")
            st.error("H√£y b·∫≠t API nh∆∞ h∆∞·ªõng d·∫´n ·ªü tr√™n.")
        else:
            st.error(f"L·ªói khi ghi worksheet '{worksheet}': {e}")
        raise

def load_data():
    """ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu t·ª´ Google Sheets."""
    # investors
    inv_cols = ["ID", "Name", "Phone", "Address", "Email", "JoinDate"]
    df_investors = _ensure_columns(_read_ws(_WS_INVESTORS), inv_cols)
    df_investors = _parse_dates(df_investors, ["JoinDate"])
    if "ID" in df_investors.columns:
        df_investors["ID"] = pd.to_numeric(df_investors["ID"], errors="coerce").astype("Int64")

    # tranches - FIX: Th√™m HWM column
    tr_cols = ["InvestorID", "TrancheID", "EntryDate", "EntryNAV", "Units", "HWM"]
    df_tranches = _ensure_columns(_read_ws(_WS_TRANCHES), tr_cols)
    df_tranches = _parse_dates(df_tranches, ["EntryDate"])
    df_tranches = _parse_numbers(df_tranches, ["EntryNAV", "Units", "HWM"])
    if "InvestorID" in df_tranches.columns:
        df_tranches["InvestorID"] = pd.to_numeric(df_tranches["InvestorID"], errors="coerce").astype("Int64")
    
    # N·∫øu HWM column r·ªóng, set = EntryNAV
    if "HWM" in df_tranches.columns:
        df_tranches["HWM"] = df_tranches["HWM"].fillna(df_tranches["EntryNAV"])

    # transactions
    tx_cols = ["ID", "InvestorID", "Date", "Type", "Amount", "NAV", "UnitsChange"]
    df_transactions = _ensure_columns(_read_ws(_WS_TRANSACTIONS), tx_cols)
    df_transactions = _parse_dates(df_transactions, ["Date"])
    df_transactions = _parse_numbers(df_transactions, ["Amount", "NAV", "UnitsChange"])
    if "ID" in df_transactions.columns:
        df_transactions["ID"] = pd.to_numeric(df_transactions["ID"], errors="coerce").astype("Int64")
    if "InvestorID" in df_transactions.columns:
        df_transactions["InvestorID"] = pd.to_numeric(df_transactions["InvestorID"], errors="coerce").astype("Int64")

    return df_investors, df_tranches, df_transactions

def save_data(df_investors, df_tranches, df_transactions):
    """Ghi to√†n b·ªô d·ªØ li·ªáu v·ªÅ Google Sheets."""
    _write_ws(_WS_INVESTORS, df_investors)
    _write_ws(_WS_TRANCHES, df_tranches)
    _write_ws(_WS_TRANSACTIONS, df_transactions)

def add_investor(df, name, phone="", address="", email=""):
    """Th√™m nh√† ƒë·∫ßu t∆∞ m·ªõi v√†o DF (ch∆∞a l∆∞u)."""
    # T·∫°o ID tƒÉng d·∫ßn
    if df is None or df.empty or "ID" not in df.columns:
        new_id = 1
    else:
        cur_max = pd.to_numeric(df["ID"], errors="coerce").dropna()
        new_id = int(cur_max.max()) + 1 if not cur_max.empty else 1
    
    join_date = datetime.today()
    new_row = pd.DataFrame([{
        "ID": new_id,
        "Name": name,
        "Phone": phone,
        "Address": address,
        "Email": email,
        "JoinDate": join_date
    }])
    return pd.concat([df, new_row], ignore_index=True)

def add_transaction(df_tranches, df_transactions, investor_id, trans_type, amount, total_nav, trans_date=None):
    """
    Ghi logic N·∫°p/R√∫t/NAV Update gi·ªëng b·∫£n CSV c≈©, nh∆∞ng l√†m tr√™n DF r·ªìi tr·∫£ v·ªÅ DF ƒë√£ c·∫≠p nh·∫≠t.
    """
    if trans_date is None:
        trans_date = datetime.today()
    else:
        # date -> datetime
        trans_date = datetime.combine(trans_date, datetime.min.time())

    # T·∫°o ID giao d·ªãch m·ªõi
    if df_transactions is None or df_transactions.empty or "ID" not in df_transactions.columns:
        new_trans_id = 1
    else:
        cur_max = pd.to_numeric(df_transactions["ID"], errors="coerce").dropna()
        new_trans_id = int(cur_max.max()) + 1 if not cur_max.empty else 1

    if trans_type == "N·∫°p":
        # total_nav = TAV_old + amount ‚Üí TAV_old = total_nav - amount
        old_total_nav = total_nav - (amount or 0.0)
        if old_total_nav < 0:
            st.error("Total NAV sau tr·ª´ amount √¢m, kh√¥ng h·ª£p l·ªá.")
            return df_tranches, df_transactions

        old_price_per_unit = calc_price_per_unit(df_tranches, old_total_nav)
        units_change = (amount or 0.0) / old_price_per_unit

        tranche_id = str(uuid.uuid4())
        new_tranche = pd.DataFrame([{
            "InvestorID": investor_id,
            "TrancheID": tranche_id,
            "EntryDate": trans_date,
            "EntryNAV": old_price_per_unit,
            "Units": units_change,
            "HWM": old_price_per_unit  # FIX: Th√™m HWM
        }])
        df_tranches = pd.concat([df_tranches, new_tranche], ignore_index=True)

        new_trans = pd.DataFrame([{
            "ID": new_trans_id, "InvestorID": investor_id, "Date": trans_date,
            "Type": "N·∫°p", "Amount": amount, "NAV": total_nav, "UnitsChange": units_change
        }])
        df_transactions = pd.concat([df_transactions, new_trans], ignore_index=True)

    elif trans_type == "R√∫t":
        # total_nav = TAV_old - amount ‚Üí TAV_old = total_nav + amount
        old_total_nav = total_nav + (amount or 0.0)
        old_price_per_unit = calc_price_per_unit(df_tranches, old_total_nav)

        investor_tranches = df_tranches[df_tranches["InvestorID"] == investor_id]
        investor_units = float(investor_tranches["Units"].sum())
        balance_before = investor_units * old_price_per_unit
        if (amount or 0.0) > balance_before + 1e-9:
            st.error("S·ªë ti·ªÅn r√∫t v∆∞·ª£t balance.")
            return df_tranches, df_transactions

        # Kh√¥ng ph·∫£i cu·ªëi nƒÉm th√¨ t√≠nh ph√≠ pro-rata
        is_end_year = (trans_date.month == 12 and trans_date.day == 31)
        fee = 0.0
        if not is_end_year:
            details = calculate_investor_fee_details(investor_tranches, trans_date, old_total_nav, df_tranches)
            fee = float(details["total_fee"])
            if (amount or 0.0) < balance_before:  # R√∫t m·ªôt ph·∫ßn
                fee *= ((amount or 0.0) / balance_before)

        effective_amount = (amount or 0.0) - fee
        units_change = -(effective_amount / old_price_per_unit)
        if investor_units + 1e-9 < abs(units_change):
            st.error("Kh√¥ng ƒë·ªß ƒë∆°n v·ªã sau tr·ª´ ph√≠.")
            return df_tranches, df_transactions

        # T·ª∑ l·ªá gi·∫£m units theo t·ªïng units c·ªßa NƒêT
        ratio = abs(units_change) / investor_units if investor_units > 0 else 0.0
        df_tranches.loc[df_tranches["InvestorID"] == investor_id, "Units"] *= (1 - ratio)
        # X√≥a tranche 0 units
        df_tranches = df_tranches[df_tranches["Units"] >= 1e-6]

        # Ghi giao d·ªãch r√∫t
        new_trans = pd.DataFrame([{
            "ID": new_trans_id, "InvestorID": investor_id, "Date": trans_date,
            "Type": "R√∫t", "Amount": -effective_amount, "NAV": total_nav, "UnitsChange": units_change
        }])
        df_transactions = pd.concat([df_transactions, new_trans], ignore_index=True)

        # N·∫øu c√≥ ph√≠ ‚Üí ghi th√™m 1 giao d·ªãch 'Ph√≠'
        if fee > 0:
            new_trans_id_fee = new_trans_id + 1
            if not df_transactions.empty:
                cur_max = pd.to_numeric(df_transactions["ID"], errors="coerce").dropna()
                new_trans_id_fee = int(cur_max.max()) + 1 if not cur_max.empty else new_trans_id + 1
            new_trans_fee = pd.DataFrame([{
                "ID": new_trans_id_fee, "InvestorID": investor_id, "Date": trans_date,
                "Type": "Ph√≠", "Amount": -fee, "NAV": total_nav, "UnitsChange": 0
            }])
            df_transactions = pd.concat([df_transactions, new_trans_fee], ignore_index=True)

        # Reset EntryNAV/EntryDate cho ph·∫ßn c√≤n l·∫°i (gi·ªëng b·∫£n tr∆∞·ªõc)
        if df_tranches[df_tranches["InvestorID"] == investor_id]["Units"].sum() > 1e-6:
            df_tranches.loc[df_tranches["InvestorID"] == investor_id, "EntryDate"] = trans_date
            df_tranches.loc[df_tranches["InvestorID"] == investor_id, "EntryNAV"] = old_price_per_unit
            df_tranches.loc[df_tranches["InvestorID"] == investor_id, "HWM"] = old_price_per_unit

    elif trans_type == "NAV Update":
        new_trans = pd.DataFrame([{
            "ID": new_trans_id, "InvestorID": 0, "Date": trans_date,
            "Type": "NAV Update", "Amount": 0, "NAV": total_nav, "UnitsChange": 0
        }])
        df_transactions = pd.concat([df_transactions, new_trans], ignore_index=True)

    return df_tranches, df_transactions

# Tham s·ªë ph√≠
HURDLE_RATE_ANNUAL = 0.06
PERFORMANCE_FEE_RATE = 0.20

def calculate_investor_fee_details(investor_tranches, ending_date_dt, ending_total_nav, df_tranches_global):
    """T√≠nh ph√≠ theo hurdle 6% pro-rata v√† fee 20% excess, gi·ªëng b·∫£n tr∆∞·ªõc."""
    if investor_tranches is None or investor_tranches.empty or (ending_total_nav or 0.0) <= 0:
        return {
            "total_fee": 0.0, "hurdle_value": 0.0, "excess_profit": 0.0,
            "invested_value": 0.0, "balance": 0.0, "profit": 0.0, "profit_perc": 0.0,
            "hwm_value": 0.0  # FIX: Th√™m HWM value
        }

    ending_price_per_unit = calc_price_per_unit(df_tranches_global, ending_total_nav)
    investor_units = float(investor_tranches["Units"].sum())
    balance = round(investor_units * ending_price_per_unit, 2)
    invested_value = float((investor_tranches["EntryNAV"] * investor_tranches["Units"]).sum())
    profit = balance - invested_value
    profit_perc = (profit / invested_value) if invested_value > 1e-9 else 0.0

    total_fee = 0.0
    hurdle_value = 0.0
    hwm_value = 0.0  # FIX: T√≠nh HWM value
    excess_profit = 0.0

    for _, tr in investor_tranches.iterrows():
        units = float(tr.get("Units", 0.0) or 0.0)
        if units < 1e-9:
            continue
        entry_date = tr.get("EntryDate")
        if pd.isna(entry_date):
            continue
        days = (ending_date_dt - entry_date).days / 365.0
        if days <= 0:
            continue
        entry_nav = float(tr.get("EntryNAV", 0.0) or 0.0)
        hwm = float(tr.get("HWM", entry_nav) or entry_nav)  # FIX: S·ª≠ d·ª•ng HWM
        
        # Hurdle calculation
        hurdle_rate = HURDLE_RATE_ANNUAL * days
        hurdle_price = entry_nav * (1 + hurdle_rate)
        
        # Use higher of hurdle and HWM
        threshold_price = max(hurdle_price, hwm)
        profit_per_unit = max(0.0, ending_price_per_unit - threshold_price)
        tranche_excess = profit_per_unit * units
        tranche_fee = PERFORMANCE_FEE_RATE * tranche_excess
        
        total_fee += tranche_fee
        hurdle_value += hurdle_price * units
        hwm_value += hwm * units  # FIX: T√≠nh t·ªïng HWM value
        excess_profit += tranche_excess

    return {
        "total_fee": round(total_fee, 2),
        "hurdle_value": round(hurdle_value, 2),
        "hwm_value": round(hwm_value, 2),  # FIX: Th√™m HWM value
        "excess_profit": round(excess_profit, 2),
        "invested_value": round(invested_value, 2),
        "balance": round(balance, 2),
        "profit": round(profit, 2),
        "profit_perc": profit_perc,
    }